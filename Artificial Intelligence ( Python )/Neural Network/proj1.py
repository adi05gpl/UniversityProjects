# -*- coding: utf-8 -*-
"""proj1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15lN7U3UTCIwZREfqEfJGbkTTy4kPXqQd
"""

#Step 1
# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
import os
from keras.datasets import mnist
import numpy as np
import urllib.request
import lasagne
import theano
from theano.tensor.signal.pool import pool_2d
import theano.tensor as T

def load_dataset():
    def download(filename, source='http://yann.lecun.com/exdb/mnist/'):
        print("Downloading", filename)
        urllib.request.urlretrieve(source+filename, filename)
    # Download the file from link and store it in our local disk

    import gzip

    def load_mnist_images(filename):
        if not (os.path.exists(filename)):
            download(filename)
    # Check if the file is on our local disk, if not, download it
        with gzip.open(filename, 'rb') as f:
            #Open zip file of images
            data = np.frombuffer(f.read(), np.uint8, offset=16)
                #We extract data from the zip file
            data = data.reshape(-1,1,28,28)
        return data/np.float32(256)

    def load_mnist_labels(filename):
        if not (os.path.exists(filename)):
            download(filename)
        with gzip.open(filename,'rb') as f:
            data = np.frombuffer(f.read(), np.uint8, offset=8)
        return data

    X_train = load_mnist_images('train-images-idx3-ubyte.gz')
    Y_train = load_mnist_labels('train-labels-idx1-ubyte.gz')
    X_test = load_mnist_images('t10k-images-idx3-ubyte.gz')
    Y_test = load_mnist_labels('t10k-labels-idx1-ubyte.gz')
    return X_train, Y_train, X_test, Y_test

#Step2
X_train,Y_train,X_test,Y_test = load_dataset()
print('X - '+str(len(X_train)))
print('Y - '+str(len(Y_train)))

#Step3
import matplotlib.pyplot as plt
#for i in range(0,X_train.size):
plt.imshow(X_train[i][0])
print(Y_train)

#Step4
    def build_NN(input_var=None):
        l_in = lasagne.layers.InputLayer(shape=(None,1,28,28), input_var=input_var)
        l_in_drop = lasagne.layers.DropoutLayer(l_in,p=0.2)
        l_hid1=lasagne.layers.DenseLayer(l_in_drop,num_units=800,nonlinearity=lasagne.nonlinearities.rectify,W=lasagne.init.GlorotUniform())
        l_hid1_drop = lasagne.layers.DropoutLayer(l_hid1,p=0.5)
        l_hid2 = lasagne.layers.DenseLayer(l_hid1_drop,num_units=800,nonlinearity=lasagne.nonlinearities.rectify,W=lasagne.init.GlorotUniform())
        l_hid2_drop = lasagne.layers.DropoutLayer(l_hid2,p=0.5)
        l_out = lasagne.layers.DenseLayer(l_hid2_drop, num_units=10,nonlinearity = lasagne.nonlinearities.softmax)
        return l_out

    input_var = T.tensor4('inputs')
    target_var = T.ivector('targets')

    network = build_NN(input_var)

    prediction = lasagne.layers.get_output(network)
    loss = lasagne.objectives.categorical_crossentropy(prediction, target_var)
    loss = loss.mean()

    params = lasagne.layers.get_all_params(network, trainable=True)
    updates = lasagne.updates.nesterov_momentum(loss,params,learning_rate = 0.02, momentum = 0.9)

    train_fn = theano.function([input_var, target_var], loss, updates=updates)

#Step5
    num_training_steps = 200
    for step in range(num_training_steps):
      train_err = train_fn(X_train,Y_train)
      print("Current step is " + str(step))

#STEP6
test_prediction = lasagne.layers.get_output(network)
val_fn = theano.function([input_var],test_prediction)

val_fn([X_test[0]])

#Step7
Y_test[0]

#step8

test_prediction = lasagne.layers.get_output(network,deterministic=True)
test_acc = T.mean(T.eq(T.argmax(test_prediction, axis=1),target_var),dtype=theano.config.floatX)
acc_fn = theano.function([input_var,target_var],test_acc)
acc_fn(X_test, Y_test)